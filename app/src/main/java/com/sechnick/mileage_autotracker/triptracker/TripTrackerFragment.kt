/*
 * Copyright 2019, The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.sechnick.mileage_autotracker.triptracker

import android.Manifest
import android.content.pm.PackageManager
import android.os.Build
import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.Fragment
import androidx.fragment.app.activityViewModels
import androidx.lifecycle.Observer
import androidx.lifecycle.ViewModelProvider
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.LinearLayoutManager
import com.sechnick.mileage_autotracker.R
import com.google.android.material.snackbar.Snackbar
import com.sechnick.mileage_autotracker.database.MileageDatabase
import com.sechnick.mileage_autotracker.databinding.FragmentTripTrackerBinding

/**
 * A fragment with buttons to record start and end times for sleep, which are saved in
 * a database. Cumulative data is displayed in a simple scrollable TextView.
 * (Because we have not learned about RecyclerView yet.)
 * The Clear button will clear all data from the database.
 */
class TripTrackerFragment : Fragment() {

    /**
     * Called when the Fragment is ready to display content to the screen.
     *
     * This function uses DataBindingUtil to inflate R.layout.fragment_active_trip.
     *
     * It is also responsible for passing the [TripTrackerViewModel] to the
     * [FragmentSleepTrackerBinding] generated by DataBinding. This will allow DataBinding
     * to use the [LiveData] on our ViewModel.
     */
    val tripTrackerViewModel : TripTrackerViewModel by activityViewModels()

    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,
                              savedInstanceState: Bundle?): View? {

        // Get a reference to the binding object and inflate the fragment views.
        val binding: FragmentTripTrackerBinding = DataBindingUtil.inflate(
                inflater, R.layout.fragment_trip_tracker, container, false)

        val application = requireNotNull(this.activity).application

        // Create an instance of the ViewModel Factory.
        val dataSource = MileageDatabase.getInstance(application).mileageDatabaseDao
        val viewModelFactory = TripTrackerViewModelFactory(dataSource, application) as ViewModelProvider.Factory

        // Get a reference to the ViewModel associated with this fragment.
//        tripTrackerViewModel =
//                ViewModelProvider(
//                        activity as ViewModelStoreOwner, viewModelFactory).get(TripTrackerViewModel::class.java)

        // To use the View Model with data binding, you have to explicitly
        // give the binding object a reference to it.
        binding.tripTrackerViewModel= tripTrackerViewModel

        val adapter = RecordedTripAdapter(RecordedTripListener { nightId ->
            //Toast.makeText(context, "${nightId}", Toast.LENGTH_LONG).show()
            tripTrackerViewModel.onTripDetailClicked(nightId)
        })
        binding.tripList.adapter = adapter


        tripTrackerViewModel.trips.observe(viewLifecycleOwner, Observer {
            it?.let {
                adapter.addHeaderAndSubmitList(it)
            }
        })

        // Specify the current activity as the lifecycle owner of the binding.
        // This is necessary so that the binding can observe LiveData updates.
        binding.lifecycleOwner = this

        // Add an Observer on the state variable for showing a Snackbar message
        // when the CLEAR button is pressed.
        tripTrackerViewModel.showSnackBarEvent.observe(viewLifecycleOwner, Observer {
            if (it == true) { // Observed state is true.
                Snackbar.make(
                        requireActivity().findViewById(android.R.id.content),
                        getString(R.string.cleared_message),
                        Snackbar.LENGTH_SHORT // How long to display the message.
                ).show()
                // Reset state to make sure the toast is only shown once, even if the device
                // has a configuration change.
                tripTrackerViewModel.doneShowingSnackbar()
            }
        })

        // Add an Observer on the state variable for Navigating when and item is clicked.
        tripTrackerViewModel.navigateToTripDetail.observe(viewLifecycleOwner, Observer { trip ->
            trip?.let {

                this.findNavController().navigate(
                        TripTrackerFragmentDirections
                                .actionTripTrackerFragmentToTripDetailFragment(trip))
                tripTrackerViewModel.onTripDetailNavigated()
            }
        })

        // Add an Observer on the state variable for Navigating when and item is clicked.
        TripTrackerViewModel.requestLocationPermission.observe(viewLifecycleOwner, Observer {
            if (it == true) { // Observed state is true.

                checkPermissionForLocation()
            }
        })

        // Add an Observer on the state variable for Navigating when and item is clicked.
        tripTrackerViewModel.locationSnackbarText.observe(viewLifecycleOwner, Observer {
            if (tripTrackerViewModel.locationSnackbarText.value == "nothing yet") {
                Snackbar.make(
                        requireActivity().findViewById(android.R.id.content),
                        tripTrackerViewModel.locationSnackbarText.value!!,
                        Snackbar.LENGTH_SHORT // How long to display the message.
                ).show()
                // Reset state to make sure the toast is only shown once, even if the device
                // has a configuration change.
            }
        })

        checkPermissionForLocation()

        val manager = LinearLayoutManager(activity)

        binding.tripList.layoutManager = manager

        return binding.root
    }







    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {

        Log.d("permissions", "requesting permissions at fragments")

        if (requestCode == TripTrackerViewModel.REQUEST_PERMISSION_LOCATION) {
            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                TripTrackerViewModel.locationPermissionGranted()
            } else {
                Toast.makeText(this.context, "Permission Denied", Toast.LENGTH_SHORT).show()
                TripTrackerViewModel.locationPermissionNotGranted()
            }
        }
    }

    fun checkPermissionForLocation(): Boolean {

        Log.d("permissions", "starting location permission check")

        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {

            if (requireContext().checkSelfPermission(Manifest.permission.ACCESS_FINE_LOCATION) ==
                    PackageManager.PERMISSION_GRANTED) {
                //TODO("could context ever be null?")
                TripTrackerViewModel.locationPermissionGranted()
                Log.d("permissions", "location permission check passed")
                true
            } else {
                // Show the permission request
                requestPermissions(arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),
                        TripTrackerViewModel.REQUEST_PERMISSION_LOCATION)
                TripTrackerViewModel.locationPermissionNotGranted()
                Log.d("permissions", "location permission check failed")
                false
            }
        } else {
            TripTrackerViewModel.locationPermissionGranted()
            Log.d("permissions", "too old to request permissions")
            true
        }
    }



}
